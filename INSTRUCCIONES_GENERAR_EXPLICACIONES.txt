INSTRUCCIONES ‚Äì Generar descripciones de gram√°tica por nivel

1) Objetivo
- Generar explicaciones breves (1‚Äì2 l√≠neas) para cada uno de los 25 niveles gramaticales.
- Guardarlas en un JSON estructurado para consumo directo en la app web.
- Carga en frontend desde archivo local, con fallback a API solo si faltara el archivo.

2) Requisitos
- Python 3.9+ instalado.
- Clave de OpenAI en un archivo .env (variable: OPENAI_API_KEY).
- Dependencias Python: ver generators/requirements.txt.

3) Preparaci√≥n del entorno
- Crear o verificar .env en la ra√≠z del proyecto (o en /generators si esa es tu convenci√≥n):
  OPENAI_API_KEY=tu_clave_de_openai
- Instalar dependencias:
  cd generators
  pip install -r requirements.txt

4) Archivos clave
- generators/config.py
  - NIVELES: fuente de verdad de los 25 niveles (id, descripcion).
  - MODEL_FEW_SHOT: modelo usado para generar las explicaciones (recomendado: gpt-4o).
  - EXPLICACIONES_FILE: ruta de salida (por defecto: output/explicaciones_gramatica.json).
  - Par√°metros de rate limit si fueran necesarios.
- generators/explicacion_generator.py
  - Recorre NIVELES ‚Üí genera una explicaci√≥n por nivel.
  - Estilo: 1‚Äì2 l√≠neas, lenguaje para 10‚Äì11 a√±os, ‚â§ ~35 palabras, 0‚Äì1 ejemplo integrado.
  - Respuesta estricta en JSON; limpieza/validaci√≥n y fallback seguro.
- generators/main.py
  - Orquestaci√≥n CLI con acci√≥n ‚Äúexplicaciones‚Äù.

5) Generaci√≥n de explicaciones
- Comando:
  cd generators
  python main.py explicaciones
- Resultado:
  generators/output/explicaciones_gramatica.json

6) Copiar a la app (para que el frontend las cargue)
- Carpeta destino: data/ en la ra√≠z del proyecto.
- Windows (CMD/PowerShell):
  if not exist data mkdir data & copy /Y generators\output\explicaciones_gramatica.json data\explicaciones_gramatica.json
- macOS/Linux:
  mkdir -p data && cp -f generators/output/explicaciones_gramatica.json data/explicaciones_gramatica.json

7) Integraci√≥n en el frontend
- index.html intenta primero leer data/explicaciones_gramatica.json y, si no existe o no encuentra la entrada del nivel, hace fallback a API.
- Para uso 100% offline, elimina el bloque de fallback a askOpenAI en la generaci√≥n de la explicaci√≥n o deja un mensaje local por defecto.

8) Verificaci√≥n r√°pida
- Inicia la app y genera una lecci√≥n.
- Debajo de ‚ÄúEjercicios‚Äù deber√≠a aparecer:
  ‚Äúüìö Gram√°tica del nivel X: [descripci√≥n del nivel]‚Äù + el texto de la explicaci√≥n cargada desde el archivo local.
- No deber√≠an verse llamadas a la API para esta secci√≥n si el archivo existe y tiene el nivel correspondiente.

9) Mantenimiento y personalizaci√≥n
- Cambiar modelo:
  Editar MODEL_FEW_SHOT en generators/config.py (p. ej., gpt-4o / gpt-4o-mini).
- Actualizar niveles:
  Editar NIVELES (id, descripcion) y volver a ejecutar:
    python generators/main.py explicaciones
- Ajustar tiempos/pausas:
  Revisar valores de rate limit en config.py si fuera necesario.

10) Criterios de estilo de las explicaciones (lo que genera el script)
- 1‚Äì2 l√≠neas m√°ximo, espa√±ol claro, tono para 10‚Äì11 a√±os.
- ‚â§ ~35 palabras por explicaci√≥n.
- Puede incluir 1 ejemplo simple en l√≠nea, no obligatorio.
- No usar listas, ni Markdown, ni emojis (las explicaciones deben ser limpias y breves).
- Deben aludir exactamente a la ‚Äúdescripcion‚Äù del nivel correspondiente.

11) Estructura del JSON de salida
{
  "metadata": {
    "total_niveles": 25,
    "fecha_creacion": "ISO-8601",
    "modelo": "gpt-4o",
    "version_script": "1.0"
  },
  "niveles": [
    { "nivel": 1, "descripcion": "‚Ä¶", "explicacion": "‚Ä¶" },
    ...
    { "nivel": 25, "descripcion": "‚Ä¶", "explicacion": "‚Ä¶" }
  ]
}

12) Problemas frecuentes y soluciones
- ‚ÄúModuleNotFoundError: dotenv‚Äù ‚Üí Ejecuta ‚Äúpip install -r requirements.txt‚Äù.
- ‚ÄúFalta la clave‚Äù ‚Üí Aseg√∫rate de tener OPENAI_API_KEY en .env (y que el proceso la lea).
- ‚ÄúNo se ve la explicaci√≥n en la app‚Äù:
  - Verifica que data/explicaciones_gramatica.json existe y es accesible.
  - Comprueba que la clave ‚Äúnivel‚Äù coincide con el nivel actual y que el campo ‚Äúexplicacion‚Äù no est√° vac√≠o.
  - Si falta, el frontend usar√° el fallback a la API (ver consola).
- Rate limit ‚Üí Vuelve a lanzar el comando; el generador hace limpieza/validaci√≥n y soporta reintentos.

13) Comandos r√°pidos
- Instalar dependencias:
  cd generators
  pip install -r requirements.txt
- Generar explicaciones:
  python main.py explicaciones
- Copiar a la app:
  Windows: if not exist data mkdir data & copy /Y generators\output\explicaciones_gramatica.json data\explicaciones_gramatica.json
  macOS/Linux: mkdir -p data && cp -f generators/output/explicaciones_gramatica.json data/explicaciones_gramatica.json
- Ejecutar app y verificar la explicaci√≥n debajo de ‚ÄúEjercicios‚Äù.
