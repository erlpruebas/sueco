
<!DOCTYPE html>
<html lang="es">
<head>
  <link rel="icon" href="/favicon.ico" type="image/x-icon">

  <meta charset="UTF-8" />
  <title>Curso de Ingl√©s</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root{--bg:#121212;--surface:#1e1e1e;--text:#e0e0e0;--primary:#bb86fc;--accent:#03dac6;--rad:12px}
    *{box-sizing:border-box}
    body{margin:0;font-family:'Segoe UI',Roboto,sans-serif;background:var(--bg);color:var(--text);line-height:1.6;padding:1rem}
    h1,h2{color:var(--primary)}
    section{background:var(--surface);border-radius:var(--rad);padding:1rem 1.5rem;margin-bottom:2rem;box-shadow:0 4px 12px rgba(0,0,0,.5)}
    button{background:var(--primary);color:var(--text);border:none;padding:.5rem 1rem;border-radius:var(--rad);cursor:pointer;font-size:1rem;margin-top:.5rem}
    button:hover{background:var(--accent)}
    .hidden{display:none}
    .item{margin-bottom:.9rem}
    .example{font-style:italic;font-size:.95rem}
    .example strong{color:var(--accent)}
    .note{margin:0 0 .5rem;color:var(--accent);font-size:.9rem}
    #finish-btn{display:block;margin:2rem auto}
    #status{color:var(--accent);margin-bottom:1rem;min-height:1.4em}
    #review-list{display:grid;grid-template-columns:1fr 1fr;gap:.75rem}
    #chat-box{max-height:220px;overflow-y:auto;padding:1rem;border:1px solid #555;border-radius:var(--rad);background:var(--surface);font-size:.95rem;margin-bottom:1rem}
    #chat-box div{margin-bottom:.5rem}
    .speak{cursor:pointer;margin-left:.4rem}
    #dict-box{column-count:4;column-gap:1rem}
    #clear-dict{background:#e35353}
    /* Ayuda flotante */
    #help-btn {
      position: fixed;
      top: 18px;
      right: 18px;
      z-index: 2000;
      background: var(--surface);
      color: var(--primary);
      border: none;
      border-radius: 50%;
      width: 38px;
      height: 38px;
      font-size: 1.5rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.18);
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background 0.2s;
      pointer-events: auto;
    }
    #help-btn:hover {
      background: var(--primary);
      color: var(--surface);
    }
    #help-modal {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 9999;
      background: var(--surface);
      color: var(--text);
      border-radius: var(--rad);
      box-shadow: 0 8px 32px rgba(0,0,0,0.45);
      padding: 2.5rem 2rem 2rem 2rem;
      max-width: 95vw;
      width: 50vw;  /* 50% del ancho de la ventana */
      min-width: 370px; /* m√≠nimo para m√≥viles */
      max-width: 800px; /* m√°ximo para pantallas muy grandes */
      font-size: 1.05rem;
      display: none;
    }
    #help-modal.visible { display: block; }
    #help-modal h3 {
      margin-top: 0;
      color: var(--primary);
      font-size: 1.2rem;
    }
    #help-modal ul { margin: 0 0 0.5em 1.2em; padding: 0; }
    #help-modal button.close-help {
      position: absolute;
      top: 10px;
      right: 14px;
      background: none;
      border: none;
      color: var(--accent);
      font-size: 1.7rem;
      cursor: pointer;
      line-height: 1;
      width: 2.2em;
      height: 2.2em;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    @media (max-width:600px){
      body{padding:.5rem}
      section{padding:.75rem 1rem;margin-bottom:1.2rem}
      h1{font-size:1.4rem;text-align:center}
      h2{font-size:1.1rem}
      #review-list{grid-template-columns:1fr}
      button{width:100%}
      #help-modal {
        width: 95vw;
        min-width: unset;
        max-width: 95vw;
        padding: 3.2rem 1rem 1.5rem 1rem;
        font-size: 1rem;
      }
      #help-btn {
        top: 10px;
        right: 10px;
        width: 44px;
        height: 44px;
        font-size: 1.7rem;
      }
      #help-modal button.close-help {
        top: 10px;
        right: 10px;
        font-size: 2rem;
        width: 2.2em;
        height: 2.2em;
      }
    }
  </style>
</head>
<body>
<h1>Curso de Ingl√©s</h1>
<p id="status"></p>

<section><h2>Vocabulario</h2><p class="note">Copia 10&nbsp;veces cada palabra en tu cuaderno para aprenderlas.</p><div id="vocab-list"></div></section>
<section><h2>Ejercicios</h2><p class="note">Traduce al ingl√©s en tu cuaderno y, si encuentras palabras que no conoces, c√≥pialas diez veces para aprenderlas.</p><div id="grammar-explanation" style="background:var(--surface);padding:1rem;border-radius:var(--rad);margin-bottom:1rem;border-left:4px solid var(--primary);"></div><div id="exercise-list"></div></section>
<section><h2>Repaso</h2><p class="note">Traduce estas palabras al ingl√©s en tu cuaderno y, si alguna no te la sabes, c√≥piala diez veces para aprenderla.</p><div id="review-list"></div></section>

<section>
  <h2>Chat con tu profesor virtual</h2>
  <div id="chat-box"></div>
  <input id="chat-input" placeholder="Escribe tu pregunta‚Ä¶" style="width:100%;padding:.5rem;border-radius:var(--rad);border:none">
  <button id="chat-send">Enviar</button>
</section>

<button id="finish-btn">Dar por terminada‚ÄØla‚ÄØlecci√≥n</button>
<!-- Bot√≥n developer para generar 60 sesiones -->
<button id="dev-run" style="position:fixed;bottom:18px;right:18px;z-index:3000;opacity:.25">RUN&nbsp;60</button>


<section id="level-section" style="background:var(--surface);border-radius:var(--rad);padding:1rem 1.5rem;margin-bottom:2rem;box-shadow:0 4px 12px rgba(0,0,0,.5)">
  <div style="margin-bottom:.7rem">
    <button id="level-current-btn" style="all:unset;cursor:pointer;color:var(--primary);font-weight:bold;font-size:1.1em;">Nivel actual: <span id="level-current"></span></button>
  </div>
  <div style="margin-bottom:.7rem;display:flex;gap:.5rem;flex-wrap:wrap;">
    <button id="level-next-btn">Avanzar nivel</button>
    <button id="level-toggle-select">Selecciona nivel</button>
  </div>
  <div style="margin-bottom:.7rem;display:flex;gap:.5rem;flex-wrap:wrap;">
    <button id="mode-repaso" style="background:#90EE90;color:#333;border:none;padding:.5rem 1rem;border-radius:var(--rad);cursor:pointer;font-size:.9rem;font-weight:bold;">Modo Repaso</button>
    <button id="mode-reforzar" style="background:#4a4a4a;color:#ccc;border:1px solid var(--primary);padding:.5rem 1rem;border-radius:var(--rad);cursor:pointer;font-size:.9rem;">Modo Reforzar Nivel</button>
  </div>
  <div id="level-select-wrap" class="hidden" style="margin-top:.7rem">
    <div class="note">Pulsa en Guardar y terminar lecci√≥n para guardar tu elecci√≥n</div>
    <div id="level-radio-list" style="margin-bottom:.7rem"></div>
    <button id="level-save-btn">Guardar y terminar lecci√≥n</button>
  </div>
</section>

<!-- ---------- Diccionario completo ---------- -->
<section id="dict-section">
  <div style="display:flex;gap:.5rem;align-items:center;flex-wrap:wrap">
    <button id="show-dict">Ver diccionario completo</button>
    <button id="clear-dict" class="hidden">Borrar diccionario</button>
  </div>
  <div id="dict-box" class="hidden" style="margin-top:.8rem;white-space:pre-wrap;font-size:.95rem"></div>
</section>

<!-- ---------- Sobre la aplicaci√≥n ---------- -->
<section id="about-section">
  <h2 style="margin-bottom:0">
    <button id="toggle-about" style="all:unset;cursor:pointer;color:var(--primary)">‚ñ∏‚ÄØSobre la aplicaci√≥n</button>
  </h2>
 <div id="about-text" class="hidden" style="margin-top:.5rem">
  <p>
    <strong>Curso de Ingl√©s</strong> es una aplicaci√≥n educativa creada por <strong>Emilio Rodr√≠guez</strong>.<br>
    Utiliza Inteligencia Artificial para sugerir vocabulario y ejercicios de ingl√©s de manera personalizada.<br>
    El objetivo es que puedas aprender y practicar ingl√©s de forma sencilla, pr√°ctica y a tu ritmo.<br>
    <br>
    Si tienes cualquier duda, sugerencia o comentario, puedes enviarlo a continuaci√≥n. ¬°Tu opini√≥n es muy valiosa para seguir mejorando la aplicaci√≥n!
  </p>
  <div style="margin-top: 20px;">
    <label for="sugerencia">¬øTienes alguna sugerencia o comentario?</label><br>
    <textarea id="sugerencia" rows="1" style="width: 100%;"></textarea><br>
    <button onclick="enviarSugerencia()">Enviar sugerencia</button>
    <p id="mensaje-enviado" style="color: green; display: none;">‚úÖ ¬°Gracias por tu sugerencia!</p>
  </div>
</div>
</section>

<!-- Bot√≥n de ayuda flotante -->
<button id="help-btn" title="¬øC√≥mo funciona?" onclick="openHelpModal(event)" ontouchend="openHelpModal(event)">?</button>
<!-- Modal de ayuda (mover justo antes de </body>) -->
<div id="help-modal" role="dialog" aria-modal="true" aria-labelledby="help-title">
  <button class="close-help" title="Cerrar ayuda">&times;</button>
  <h3 id="help-title">¬øC√≥mo usar la aplicaci√≥n?</h3>
  <ul>
    <li>En tu <strong>cuaderno</strong>, aprende el vocabulario, haz los ejercicios y el repaso que aparece en cada lecci√≥n.</li>
    <li>Usa el <strong>chat</strong> para preguntar dudas a tu profesor virtual sobre gram√°tica, vocabulario y cualquier cosa que necesites.</li>
    <li>Pulsa el icono <span style="color:var(--accent)">üîä</span> para escuchar la pronunciaci√≥n en ingl√©s.</li>
    <li>Pulsa <strong>"Dar por terminada la lecci√≥n"</strong> para guardar tu progreso y vocabulario.</li>
    <li><strong>Selecciona tu nivel</strong> con el bot√≥n "Selecciona nivel" o avanza con "Avanzar nivel".</li>
  </ul>

  <h4 style="color:var(--primary);margin:1em 0 .5em 0">Modos de estudio:</h4>
  <ul>
    <li><strong>Modo Repaso</strong> (recomendado): Los ejercicios combinan gram√°tica del nivel actual y niveles anteriores para reforzar todo lo aprendido.</li>
    <li><strong>Modo Reforzar Nivel</strong>: Los ejercicios se centran exclusivamente en la gram√°tica del nivel actual para un estudio intensivo.</li>
  </ul>

  <div style="margin-top:1em;font-size:.97em;color:var(--accent)">¬°Explora, repite y aprende a tu ritmo!</div>
</div>

<script>
/* ---------- funci√≥n de log ---------- */
function logEvent(action, details='') {
  fetch('/.netlify/functions/log', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ action, details })
  }).catch(console.error);
}

/* ---------- configuraci√≥n ---------- */
const DICT_KEY='curso_ingles_diccionario';
const ENDPOINT='/.netlify/functions/openai';
const TTS_ENDPOINT='/.netlify/functions/tts';
const LEVEL_KEY = 'curso_ingles_nivel';

// === NUEVO: para modo autom√°tico ===
const SESSIONS_KEY = 'curso_ingles_sesiones';   // guardar√° cada lecci√≥n completa
let  allSessions   = JSON.parse(localStorage.getItem(SESSIONS_KEY) || '[]');

let nivel = Number(localStorage.getItem(LEVEL_KEY) || 1);
let modoEnfocado = localStorage.getItem('curso_ingles_modo_enfocado') === 'true';
const levels = [
  {id:1, nombre:'Nivel 1', descripcion:'Presente simple afirmativo con "to be" y sujeto + verbo'},
  {id:2, nombre:'Nivel 2', descripcion:'Presente simple afirmativo con otros verbos (rutinas, tercera persona -s)'},
  {id:3, nombre:'Nivel 3', descripcion:'Presente simple negativo (don\'t / doesn\'t)'},
  {id:4, nombre:'Nivel 4', descripcion:'Preguntas en presente simple (do / does + wh-questions)'},
  {id:5, nombre:'Nivel 5', descripcion:'Presente continuo: afirmativo, negativo y preguntas'},
  {id:6, nombre:'Nivel 6', descripcion:'Pasado simple afirmativo (regulares e irregulares comunes)'},
  {id:7, nombre:'Nivel 7', descripcion:'Pasado simple negativo y preguntas'},
  {id:8, nombre:'Nivel 8', descripcion:'Verbo "to be" en pasado (was/were + preguntas/negaciones)'},
  {id:9, nombre:'Nivel 9', descripcion:'Marcadores temporales en presente y pasado (now, yesterday, last week, etc.)'},
  {id:10, nombre:'Nivel 10', descripcion:'Futuro con "going to" (planes/intenciones)'},
  {id:11, nombre:'Nivel 11', descripcion:'Futuro con "will" (predicciones, promesas, decisiones r√°pidas)'},
  {id:12, nombre:'Nivel 12', descripcion:'Can / can\'t (habilidad, permiso, posibilidad)'},
  {id:13, nombre:'Nivel 13', descripcion:'Must / mustn\'t / should / shouldn\'t (obligaci√≥n y consejo)'},
  {id:14, nombre:'Nivel 14', descripcion:'There is / there are + cuantificadores (some, any, a lot of, much/many)'},
  {id:15, nombre:'Nivel 15', descripcion:'Comparativos (adjetivos cortos y largos)'},
  {id:16, nombre:'Nivel 16', descripcion:'Superlativos'},
  {id:17, nombre:'Nivel 17', descripcion:'Conectores simples (and, but, because, so, or)'},
  {id:18, nombre:'Nivel 18', descripcion:'Adverbios de frecuencia + posici√≥n en la frase'},
  {id:19, nombre:'Nivel 19', descripcion:'Presente perfecto (have/has + participio) + for / since / just / already / yet'},
  {id:20, nombre:'Nivel 20', descripcion:'Condicionales 0 y 1'},
  {id:21, nombre:'Nivel 21', descripcion:'Condicionales 2 y 3 (introducci√≥n progresiva, sin forzar)'},
  {id:22, nombre:'Nivel 22', descripcion:'Voz pasiva (presente y pasado simple)'},
  {id:23, nombre:'Nivel 23', descripcion:'Discurso indirecto (presente simple y pasado simple)'},
  {id:24, nombre:'Nivel 24', descripcion:'Phrasal verbs comunes (go on, get up, look for...)'},
  {id:25, nombre:'Nivel 25', descripcion:'Expresiones y conectores m√°s complejos (although, however, despite...)'}
];

/* ---------- referencias DOM ---------- */
const vocabEl=document.getElementById('vocab-list');
const exEl=document.getElementById('exercise-list');
const repEl=document.getElementById('review-list');
const statusEl=document.getElementById('status');
const chatBox=document.getElementById('chat-box');
const chatInp=document.getElementById('chat-input');
const dictBox=document.getElementById('dict-box');
const btnShow=document.getElementById('show-dict');
const btnClear=document.getElementById('clear-dict');
const aboutText=document.getElementById('about-text');
const toggleAbout=document.getElementById('toggle-about');
const levelCurrent = document.getElementById('level-current');
const levelCurrentBtn = document.getElementById('level-current-btn');
const levelNextBtn = document.getElementById('level-next-btn');
const levelToggleSelect = document.getElementById('level-toggle-select');
const levelSelectWrap = document.getElementById('level-select-wrap');
const levelRadioList = document.getElementById('level-radio-list');
const levelSelect = document.getElementById('level-select');
const levelInfo = document.getElementById('level-info');
const levelSaveBtn = document.getElementById('level-save-btn');

/* ---------- estado ---------- */
let dictionary=JSON.parse(localStorage.getItem(DICT_KEY)||'[]');
let currentLesson=null;
let statusTimer = null;
function setStatus(msg){ 
  statusEl.textContent=msg; 
  // Limpiar timer anterior si existe
  if (statusTimer) {
    clearInterval(statusTimer);
    statusTimer = null;
  }
}

function setStatusWithTimer(msg) {
  // Limpiar timer anterior si existe
  if (statusTimer) {
    clearInterval(statusTimer);
    statusTimer = null;
  }
  
  let seconds = 0;
  statusEl.textContent = `${msg} (0s)`;
  statusTimer = setInterval(() => {
    seconds++;
    statusEl.textContent = `${msg} (${seconds}s)`;
  }, 1000);
}

/* ---------- controlar restauraci√≥n de scroll ---------- */
if ('scrollRestoration' in history) history.scrollRestoration='manual';

/* ---------- utilidades ---------- */
function decodeEmojis(s=''){return String(s).replace(/\\u([\\da-fA-F]{4})/g,(_,h)=>String.fromCharCode(parseInt(h,16)));}
function stripEmojis(s){return decodeEmojis(s).replace(/\p{Extended_Pictographic}/gu,'').trim();}
function safeJSON(t){try{return JSON.parse(t.replace(/```json|```/gi,'').trim());}catch{const m=t.match(/\{[\s\S]*\}/);if(m)try{return JSON.parse(m[0]);}catch{};return null;}}

// M√≥dulo de ejemplos por nivel para few-shot learning
const ejemplosPorNivel = {
  1: { valid: [
    "He is my brother.",
    "They are happy."
  ]},
  2: { valid: [
    "She plays tennis on Mondays.",
    "We live in Madrid."
  ]},
  3: { valid: [
    "I don't like coffee.",
    "He doesn't speak German."
  ]},
  4: { valid: [
    "Do you work here?",
    "Where does she live?"
  ]},
  5: { valid: [
    "I am reading a book.",
    "Are they watching TV?"
  ]},
  6: { valid: [
    "She visited Paris last year.",
    "They played football yesterday."
  ]},
  7: { valid: [
    "He didn't see the movie.",
    "Did you go to the party?"
  ]},
  8: { valid: [
    "I was tired yesterday.",
    "Were they at home?"
  ]},
  9: { valid: [
    "Now she is cooking dinner.",
    "I visited them last week."
  ]},
  10: { valid: [
    "I am going to travel tomorrow.",
    "They are going to buy a new car."
  ]},
  11: { valid: [
    "I will call you tonight.",
    "They will arrive soon."
  ]},
  12: { valid: [
    "She can swim well.",
    "He can't drive."
  ]},
  13: { valid: [
    "You must wear a helmet.",
    "We shouldn't waste water."
  ]},
  14: { valid: [
    "There are many books on the table.",
    "There isn't much sugar left."
  ]},
  15: { valid: [
    "This car is faster than that one.",
    "She is more intelligent than him."
  ]},
  16: { valid: [
    "Mount Everest is the highest mountain.",
    "This is the most interesting book."
  ]},
  17: { valid: [
    "I like tea, but he prefers coffee.",
    "She stayed at home because it was raining."
  ]},
  18: { valid: [
    "He often goes jogging.",
    "I never eat meat."
  ]},
  19: { valid: [
    "She has just arrived.",
    "They have lived here since 2010."
  ]},
  20: { valid: [
    "If you heat ice, it melts.",
    "If it rains, I will stay home."
  ]},
  21: { valid: [
    "If I had money, I would travel.",
    "If you had called, I would have helped."
  ]},
  22: { valid: [
    "The cake was baked by my mom.",
    "The letters are delivered every morning."
  ]},
  23: { valid: [
    "He said that he was tired.",
    "She told me that she would come."
  ]},
  24: { valid: [
    "She got up early.",
    "They looked for their keys."
  ]},
  25: { valid: [
    "Although it was late, they continued working.",
    "He went out despite the rain."
  ]}
};

// Funci√≥n para obtener ejemplos negativos (niveles fuera del rango de estudio)
function getEjemplosNegativos(nivelActual) {
  const nivelesFuera = [];
  const nivelesEnEstudio = modoEnfocado ? [nivelActual] : [nivelActual, nivelActual-1, nivelActual-2];
  
  for (let i = 1; i <= 25; i++) {
    if (!nivelesEnEstudio.includes(i) && ejemplosPorNivel[i]) {
      nivelesFuera.push({
        nivel: i,
        descripcion: levels[i-1].descripcion,
        ejemplo: ejemplosPorNivel[i].valid[0]
      });
    }
  }
  
  // Tomar solo los primeros 5 ejemplos negativos para no hacer el prompt muy largo
  return nivelesFuera.slice(0, 5);
}

// Funci√≥n para generar distribuci√≥n espec√≠fica de ejercicios
function getDistribucionEjercicios(nivelActual) {
  if (modoEnfocado) {
    return `Distribuci√≥n: 10 frases del nivel actual (${levels[nivelActual-1].descripcion})`;
  } else {
    const nivel1 = nivelActual;
    const nivel2 = Math.max(1, nivelActual - 1);
    const nivel3 = Math.max(1, nivelActual - 2);
    const nivel4 = Math.max(1, nivelActual - 3);
    
    return `Distribuci√≥n:
- 4 frases del nivel actual (${levels[nivel1-1].descripcion})
- 3 frases del nivel anterior (${levels[nivel2-1].descripcion})
- 2 frases del nivel -2 (${levels[nivel3-1].descripcion})
- 1 frase del nivel -3 (${levels[nivel4-1].descripcion})`;
  }
}

function getGrammarInstructions(nivel) {
  let out = '‚Äì Frases simples.';
  for (let i = 0; i < nivel; ++i) {
    let desc = levels[i].descripcion;
    if (i === 2) desc = desc.replace('afirm./neg.', 'afirmativo y negativo');
    out += `\n  ‚Äì ${desc}`;
  }
  return out;
}
async function askOpenAI(prompt){
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 segundos timeout
  
  try {
    const r = await fetch(ENDPOINT, {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({prompt}),
      signal: controller.signal
    });
    clearTimeout(timeoutId);
    if(!r.ok) throw new Error(r.statusText);
    return (await r.json()).content.trim();
  } catch (e) {
    clearTimeout(timeoutId);
    if (e.name === 'AbortError') {
      throw new Error('Timeout: La respuesta tard√≥ m√°s de 30 segundos');
    }
    throw e;
  }
}

/* ---------- TTS ---------- */
const audioCache=new Map();
async function speak(el,txt){
  if(audioCache.has(txt)){new Audio(audioCache.get(txt)).play();return;}
  el.textContent='‚è≥';
  try{
    const r=await fetch(TTS_ENDPOINT,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({text:txt})});
    if(!r.ok)throw new Error('TTS error');
    const b64=(await r.json()).audio;
    const blob=await fetch(`data:audio/mp3;base64,${b64}`).then(r=>r.blob());
    const url=URL.createObjectURL(blob);
    audioCache.set(txt,url);el.textContent='üîä';new Audio(url).play();
    logEvent('tts', txt);              /* ‚Üê LOG AUDIO */
  }catch(e){el.textContent='‚ùå';console.error(e);}
}
const speakIcon=t=>` <span class="speak" data-text="${t}">üîä</span>`;

/* ---------- generaci√≥n de datos ---------- */
async function fetchNewWords(){
  setStatusWithTimer('üîé Obteniendo palabras‚Ä¶');
  // Limitar a las √∫ltimas 50 palabras para evitar prompts excesivos
  const recentWords = dictionary.slice(-50).map(w=>w.en).join(', ');
  const prompt=`Genera 10 palabras √∫tiles del d√≠a a d√≠a en ingl√©s y espa√±ol. Devuelve SOLO JSON: {"vocabulario":[{"en":"palabra","es":"traducci√≥n"}]}. No uses estas palabras: ${recentWords}.`;
  for(let i=0;i<3;i++){
    try {
      const obj=safeJSON(await askOpenAI(prompt));
      if(obj?.vocabulario?.length===10){
        const arr=obj.vocabulario.map(o=>({en:o.en.trim(),es:o.es.trim()})).filter(w=>w.en&&w.es);
        if(arr.length===10) return arr;
      }
    } catch (e) {
      console.error(`Intento ${i+1} fall√≥:`, e);
      if (i === 2) throw new Error('No se pudieron obtener palabras del vocabulario');
    }
  }
  throw new Error('No se obtuvieron 10 palabras v√°lidas');
}

async function fetchLesson(words){
  setStatusWithTimer('üõ†Ô∏è Generando ejercicios‚Ä¶');
  const listado=words.map(w=>`${w.en}:${w.es}`).join(', ');
  
  // Generar explicaci√≥n gramatical (con manejo de errores)
  let grammarExplanation = '';
  try {
    const grammarExplanationPrompt = `Explica brevemente (1-2 l√≠neas) la gram√°tica del nivel ${nivel}: "${levels[nivel-1].descripcion}" para un estudiante de 10-11 a√±os.`;
    grammarExplanation = await askOpenAI(grammarExplanationPrompt);
  } catch (e) {
    console.error('Error generando explicaci√≥n gramatical:', e);
    grammarExplanation = `Gram√°tica del nivel ${nivel}: ${levels[nivel-1].descripcion}`;
  }

  // === PROMPT MEJORADO con las tres estrategias ====================
  let grammarPoints = [];
  if (modoEnfocado) {
    // Solo nivel actual
    grammarPoints = [levels[nivel - 1].descripcion];
  } else {
    // √öltimos 3 niveles (incluyendo el actual)
    grammarPoints = [
      levels[nivel - 1].descripcion,                 // nivel actual
      ...(nivel > 1 ? [levels[nivel - 2].descripcion] : []),   // 1 nivel atr√°s
      ...(nivel > 2 ? [levels[nivel - 3].descripcion] : [])    // 2 niveles atr√°s
    ];
  }

  // A) FEW-SHOT LEARNING: Ejemplos v√°lidos del nivel actual
  const ejemplosNivelActual = ejemplosPorNivel[nivel]?.valid || [];
  const fewShotExamples = ejemplosNivelActual.map(ej => `"${ej}"`).join(', ');
  
  // B) INSTRUCCIONES NEGATIVAS: Ejemplos de lo que NO debe usar
  const ejemplosNegativos = getEjemplosNegativos(nivel);
  const instruccionesNegativas = ejemplosNegativos.map(ej => 
    `- NO usar: ${ej.descripcion} (ej: "${ej.ejemplo}")`
  ).join('\n');
  
  // C) DISTRIBUCI√ìN ESPEC√çFICA
  const distribucion = getDistribucionEjercicios(nivel);

  const prompt = `Genera JSON con 10 palabras: ${listado}.

${modoEnfocado ? 
  `MODO: Solo nivel actual (${levels[nivel-1].descripcion})` :
  `MODO: Repaso de m√∫ltiples niveles
GRAM√ÅTICA: ${grammarPoints.join(' + ')}`
}

${distribucion}

EJEMPLOS V√ÅLIDOS del nivel actual: [${fewShotExamples}]

${instruccionesNegativas}

JSON:
{
  "vocabulario": [{"en":"word","es":"palabra","ej_en":"example","ej_es":"ejemplo üòä"}],
  "ejercicios": [{"es":"frase üòä","en":"sentence"}]
}

REGLAS:
- 10 ejercicios que formen una historia coherente
- Afirmativas, negativas, interrogativas
- Cada ejercicio usa una palabra nueva del vocabulario
- Las frases en espa√±ol terminan con üòä
- Respeta exactamente la distribuci√≥n especificada`;

  // --- Validaci√≥n robusta y reintentos ---
  let bestAttempt = null;
  let bestScore = -1; // cantidad de palabras nuevas cubiertas

  for(let intento=1; intento<=2; intento++){
    console.log(`Intento ${intento} de generar ejercicios...`);
    try {
      const obj = safeJSON(await askOpenAI(prompt));
      if (!obj) throw new Error('JSON inv√°lido');

      // Normalizar arrays (solo vocabulario y ejercicios)
      ['vocabulario','ejercicios'].forEach(k=>{
        if(!obj[k]) return;
        if(Array.isArray(obj[k])) return;
        obj[k]=Object.values(obj[k]);
      });

      // Verificar estructura m√≠nima
      if(!Array.isArray(obj.vocabulario) || !Array.isArray(obj.ejercicios)) throw new Error('Estructura incorrecta');
      if(obj.vocabulario.length!==10 || obj.ejercicios.length!==10) throw new Error('Longitud incorrecta');

      // Contar cu√°ntas palabras nuevas aparecen en los ejercicios
      const wordsLower = words.map(w=>w.en.toLowerCase());
      const exercisesText = obj.ejercicios.map(e=>`${e.en}`.toLowerCase()).join(' ');
      const foundCount = wordsLower.filter(w=>exercisesText.includes(w)).length;

      console.log(`‚Üí Intento ${intento}: ${foundCount}/10 palabras encontradas`);

      // Actualizar mejor intento
      if(foundCount > bestScore){
        bestScore = foundCount;
        bestAttempt = obj;
      }

      // Si es perfecto, lo usamos de inmediato
      if(foundCount === 10){
        return { ...obj, grammarExplanation };
      }

    } catch(e){
      console.warn(`Intento ${intento} fallido:`, e.message);
    }
  }

  // Si no obtuvimos un resultado perfecto, usamos el mejor intento si cubre al menos 1 palabra
  if(bestAttempt && bestScore > 0){
    console.warn(`Usando mejor intento con ${bestScore}/10 palabras nuevas cubiertas`);
    return { ...bestAttempt, grammarExplanation };
  }

  // Ning√∫n intento v√°lido
  throw new Error('No se pudo generar una lecci√≥n v√°lida tras 2 intentos.');
}


/* ---------- render ---------- */
function renderLesson(les){
  vocabEl.innerHTML=exEl.innerHTML=repEl.innerHTML='';
  
  // Mostrar explicaci√≥n gramatical
  const grammarEl = document.getElementById('grammar-explanation');
  if (grammarEl && les.grammarExplanation) {
    grammarEl.innerHTML = `<strong>üìö Gram√°tica del nivel ${nivel}: ${levels[nivel-1].descripcion}</strong><br>${les.grammarExplanation}`;
  }
  les.vocabulario.forEach(w=>{
    vocabEl.insertAdjacentHTML('beforeend',
      `<div class="item"><strong>${w.es}</strong>¬†‚Äì¬†${w.en}${speakIcon(w.en)}<br>
       <span class="example">${decodeEmojis(w.ej_es)}<br>
       <strong>${stripEmojis(w.ej_en)}</strong>${speakIcon(w.ej_en)}</span></div>`);
  });
  les.ejercicios.forEach((f,i)=>{
    exEl.insertAdjacentHTML('beforeend',
      `<div class="item">${i+1}.¬†${decodeEmojis(f.es)}
         <button class="show">Soluci√≥n</button>
         <span class="hidden">${stripEmojis(f.en)}${speakIcon(f.en)}</span></div>`);
  });
  les.repaso.forEach(p=>{
    const esTxt=p.es??p.espanol??(Array.isArray(p)?p[0]:Object.values(p)[0]);
    const enTxt=p.en??p.ingles ??(Array.isArray(p)?p[1]:Object.values(p)[1]??'');
    repEl.insertAdjacentHTML('beforeend',
      `<div class="item">${decodeEmojis(esTxt)}
         <button class="show">Soluci√≥n</button>
         <span class="hidden">${decodeEmojis(enTxt)}${speakIcon(enTxt)}</span></div>`);
  });
  currentLesson=les;
}

/* ---------- eventos ---------- */
document.addEventListener('click',e=>{
  if(e.target.classList.contains('speak')) speak(e.target,e.target.dataset.text);
  if(e.target.classList.contains('show')){
    e.target.nextElementSibling.classList.toggle('hidden');
    logEvent('click_boton', 'Mostrar soluci√≥n');
  }
});

/* ---------- flujo principal ---------- */
async function generate(){
  try {
    const words  = await fetchNewWords();
    const lesson = await fetchLesson(words);

    // ‚ñ∫ elegimos 10 palabras antiguas para el repaso
    const extra = dictionary
                   .filter(d => !words.some(w => w.en === d.en))
                   .sort(() => Math.random() - 0.5)
                   .slice(0, 10)
                   .map(d => ({es: d.es, en: d.en}));

    lesson.repaso = [
      ...words.map(w => ({es: w.es, en: w.en})),
      ...extra
    ];

    renderLesson(lesson);
    // Limpiar timer y mostrar mensaje final
    if (statusTimer) {
      clearInterval(statusTimer);
      statusTimer = null;
    }
    setStatus('‚úÖ Lecci√≥n lista (Nivel ' + nivel + ': ' + levels[nivel-1].descripcion + ')');
    logEvent('iniciar_leccion_auto', `Nivel ${nivel}`);

    return lesson;          // ‚Üê ahora la funci√≥n DEVUELVE la lecci√≥n
  } catch (e) {
    console.error(e);
    setStatus('Cargando p√°gina‚Ä¶');
    setTimeout(() => location.reload(), 2000);
    throw e;
  }
}
/* ---------- TERMINAR LECCI√ìN (funci√≥n nueva) ---------- */
function terminarLeccion(lesson){
  // 1¬∑ A√±ade el vocabulario nuevo al diccionario
  lesson.vocabulario.forEach(w=>{
    if(!dictionary.some(d => d.en === w.en)){
      dictionary.push({en: w.en, es: w.es});
    }
  });
  localStorage.setItem(DICT_KEY, JSON.stringify(dictionary));

  // 2¬∑ Guarda la lecci√≥n completa en el hist√≥rico
  allSessions.push({...lesson, nivel, timestamp: Date.now()});
  localStorage.setItem(SESSIONS_KEY, JSON.stringify(allSessions));

  // 3¬∑ Registro en el log
  logEvent('terminar_leccion_auto', `Nivel ${nivel}, total sesiones: ${allSessions.length}`);
}



window.addEventListener('load',()=>{
  // --- Inicializar selector de nivel ---
  if (levelRadioList && levelCurrent) {
    levelCurrent.textContent = `${nivel}. ${levels[nivel-1].descripcion}`;
    // Crear radio buttons para selecci√≥n m√∫ltiple
    levelRadioList.innerHTML = levels.map(l => `
      <div style="margin-bottom:.5rem">
        <input type="radio" id="level-${l.id}" name="level-select" value="${l.id}" ${l.id === nivel ? 'checked' : ''}>
        <label for="level-${l.id}" style="margin-left:.5rem">${l.id}. ${l.nombre} ‚Äî ${l.descripcion}</label>
      </div>
    `).join('');
    // Bot√≥n avanzar nivel
    levelNextBtn.onclick = function() {
      if (nivel < levels.length) {
        nivel++;
        localStorage.setItem(LEVEL_KEY, nivel);
        levelCurrent.textContent = `${nivel}. ${levels[nivel-1].descripcion}`;
        document.querySelectorAll('input[name="level-select"]').forEach(radio => {
          radio.checked = radio.value == nivel;
        });
        // Guardar vocabulario y recargar como si se hubiera terminado la lecci√≥n
        if(currentLesson) {
          currentLesson.vocabulario.forEach(w=>{
            if(!dictionary.some(d=>d.en===w.en)) dictionary.push({en:w.en,es:w.es});
          });
          localStorage.setItem(DICT_KEY,JSON.stringify(dictionary));
        }
        logEvent('nivel_avanzar', `Nuevo nivel: ${nivel}`);
        logEvent('terminar_leccion', `Palabras nuevas: ${currentLesson?.vocabulario?.length||0}`);
        document.querySelectorAll('.item span:not(.hidden)').forEach(el=>el.classList.add('hidden'));
        dictBox.classList.add('hidden'); btnClear.classList.add('hidden'); btnShow.textContent='Ver diccionario completo';
        aboutText.classList.add('hidden'); toggleAbout.textContent='‚ñ∏ Sobre la aplicaci√≥n';
        window.scrollTo({top:0,left:0,behavior:'smooth'});
        setTimeout(()=>location.reload(),500);
      }
    };
    // Bot√≥n mostrar selector
    levelToggleSelect.onclick = function() {
      levelSelectWrap.classList.toggle('hidden');
      if (!levelSelectWrap.classList.contains('hidden')) {
        levelSelectWrap.style.display = 'block';
        logEvent('nivel_selector_abrir', 'Abre selector de nivel');
      } else {
        levelSelectWrap.style.display = '';
      }
    };
    // Bot√≥n guardar selecci√≥n (Guardar y terminar lecci√≥n en selector)
    levelSaveBtn.onclick = function() {
      const selectedRadio = document.querySelector('input[name="level-select"]:checked');
      if (selectedRadio) {
        nivel = Number(selectedRadio.value);
        localStorage.setItem(LEVEL_KEY, nivel);
        levelCurrent.textContent = `${nivel}. ${levels[nivel-1].descripcion}`;
        levelSelectWrap.classList.add('hidden');
        // Guardar vocabulario y recargar como si se hubiera terminado la lecci√≥n
        if(currentLesson) {
          currentLesson.vocabulario.forEach(w=>{
            if(!dictionary.some(d=>d.en===w.en)) dictionary.push({en:w.en,es:w.es});
          });
          localStorage.setItem(DICT_KEY,JSON.stringify(dictionary));
        }
        logEvent('nivel_guardar', `Nivel guardado: ${nivel}`);
        logEvent('terminar_leccion', `Palabras nuevas: ${currentLesson?.vocabulario?.length||0}`);
        document.querySelectorAll('.item span:not(.hidden)').forEach(el=>el.classList.add('hidden'));
        dictBox.classList.add('hidden'); btnClear.classList.add('hidden'); btnShow.textContent='Ver diccionario completo';
        aboutText.classList.add('hidden'); toggleAbout.textContent='‚ñ∏ Sobre la aplicaci√≥n';
        window.scrollTo({top:0,left:0,behavior:'smooth'});
        setTimeout(()=>location.reload(),500);
      }
    };
    // Al hacer click en el bot√≥n de nivel actual, tambi√©n muestra el selector
    levelCurrentBtn.onclick = function() {
      levelSelectWrap.classList.toggle('hidden');
      if (!levelSelectWrap.classList.contains('hidden')) {
        levelSelectWrap.style.display = 'block';
        logEvent('nivel_selector_abrir', 'Abre selector de nivel desde bot√≥n nivel actual');
      } else {
        levelSelectWrap.style.display = '';
      }
    };
    // Log para selecci√≥n de radio
    levelRadioList.addEventListener('change', function(e) {
      if(e.target && e.target.matches('input[type="radio"]')) {
        logEvent('nivel_radio_seleccion', `Seleccionado: ${e.target.value}`);
      }
    });
    
    // Funcionalidad de los botones de modo
    const modeRepaso = document.getElementById('mode-repaso');
    const modeReforzar = document.getElementById('mode-reforzar');
    
    if (modeRepaso && modeReforzar) {
      // Actualizar estado inicial de los botones
      updateModeButtons();
      
      modeRepaso.addEventListener('click', function() {
        modoEnfocado = false;
        localStorage.setItem('curso_ingles_modo_enfocado', 'false');
        updateModeButtons();
        logEvent('modo_cambio', 'Modo Repaso');
      });
      
      modeReforzar.addEventListener('click', function() {
        modoEnfocado = true;
        localStorage.setItem('curso_ingles_modo_enfocado', 'true');
        updateModeButtons();
        logEvent('modo_cambio', 'Modo Reforzar Nivel');
      });
    }
    
    function updateModeButtons() {
      if (modeRepaso && modeReforzar) {
        if (modoEnfocado) {
          // Modo Reforzar activo
          modeReforzar.style.background = '#90EE90';
          modeReforzar.style.color = '#333';
          modeReforzar.style.border = 'none';
          modeReforzar.style.fontWeight = 'bold';
          
          modeRepaso.style.background = '#4a4a4a';
          modeRepaso.style.color = '#ccc';
          modeRepaso.style.border = '1px solid var(--primary)';
          modeRepaso.style.fontWeight = 'normal';
        } else {
          // Modo Repaso activo
          modeRepaso.style.background = '#90EE90';
          modeRepaso.style.color = '#333';
          modeRepaso.style.border = 'none';
          modeRepaso.style.fontWeight = 'bold';
          
          modeReforzar.style.background = '#4a4a4a';
          modeReforzar.style.color = '#ccc';
          modeReforzar.style.border = '1px solid var(--primary)';
          modeReforzar.style.fontWeight = 'normal';
        }
      }
    }
  }
  navigator.onLine?generate():setStatus('Sin conexi√≥n');
});

/* ---------- bot√≥n FIN ---------- */
document.getElementById('finish-btn').addEventListener('click', ()=>{
  if (!currentLesson) return;          // si a√∫n no hay lecci√≥n, salir
  terminarLeccion(currentLesson);      // usa la funci√≥n nueva
  window.scrollTo({top:0,left:0,behavior:'smooth'});
  setTimeout(()=>location.reload(), 500);
});

/* ---------- CHAT ---------- */
document.getElementById('chat-send').onclick=sendChat;
chatInp.addEventListener('keypress',e=>{if(e.key==='Enter')sendChat();});
async function sendChat(){
  const q=chatInp.value.trim(); if(!q) return; chatInp.value='';
  chatBox.insertAdjacentHTML('beforeend',`<div><strong>T√∫:</strong> ${q}</div>`); chatBox.scrollTop=chatBox.scrollHeight;
  logEvent('chat_usuario', q);
  try{
    const a=await askOpenAI(`Act√∫a como profesor de ingl√©s (ni√±os 10‚Äë11 a√±os). Responde brevemente: ${q}`);
    chatBox.insertAdjacentHTML('beforeend',`<div><strong>ChatGPT:</strong> ${a}</div>`); chatBox.scrollTop=chatBox.scrollHeight;
  }catch(e){chatBox.insertAdjacentHTML('beforeend',`<div style="color:#ff6b6b;">Error: ${e.message}</div>`);}
}

/* ---------- Diccionario completo ---------- */
btnShow.addEventListener('click',()=>{
  if(dictBox.classList.contains('hidden')){
    const list=JSON.parse(localStorage.getItem(DICT_KEY)||'[]');
    dictBox.textContent=list.length?list.map((w,i)=>`${i+1}. ${w.es} ‚Äì ${w.en}`).join('\n'):'(diccionario vac√≠o)';
    dictBox.classList.remove('hidden'); btnClear.classList.remove('hidden'); btnShow.textContent='Ocultar diccionario';
    logEvent('click_boton','Mostrar diccionario');
  }else{
    dictBox.classList.add('hidden'); btnClear.classList.add('hidden'); btnShow.textContent='Ver diccionario completo';
    logEvent('click_boton','Ocultar diccionario');
  }
});
btnClear.addEventListener('click',()=>{
  if(confirm('¬øBorrar todo el diccionario guardado?')){
    localStorage.removeItem(DICT_KEY); dictionary=[]; dictBox.textContent='(diccionario borrado)';
    logEvent('click_boton','Borrar diccionario');
  }
});

/* ---------- Sobre la aplicaci√≥n ---------- */
toggleAbout.addEventListener('click',()=>{
  const open=!aboutText.classList.toggle('hidden');
  toggleAbout.textContent=(open?'‚ñæ':'‚ñ∏')+' Sobre la aplicaci√≥n';
  logEvent('click_boton', open?'Mostrar sobre':'Ocultar sobre');
});

function enviarSugerencia() {
  const comentario = document.getElementById('sugerencia').value;
  const mensaje = document.getElementById('mensaje-enviado');
  if (!comentario.trim()) return;

  fetch('/.netlify/functions/log', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({
      ip: 'auto', // o '127.0.0.1' si prefieres
      action: 'sugerencia',
      details: comentario,
      key: 'TU_CLAVE'
    })
  }).then(res => res.json())
    .then(() => {
      mensaje.style.display = 'block';
      document.getElementById('sugerencia').value = '';
      setTimeout(() => mensaje.style.display = 'none', 3000);
    }).catch(console.error);
}

// Ayuda flotante
function openHelpModal(e) {
  e.preventDefault();
  e.stopPropagation();
  var helpModal = document.getElementById('help-modal');
  if(helpModal) helpModal.classList.add('visible');
}
const helpModal = document.getElementById('help-modal');
if(helpModal) {
  helpModal.querySelector('.close-help').onclick = function(e) {
    e.preventDefault();
    e.stopPropagation();
    helpModal.classList.remove('visible');
  };
  // Cerrar con Escape
  document.addEventListener('keydown', function(e) {
    if(helpModal.classList.contains('visible') && e.key === 'Escape') helpModal.classList.remove('visible');
  });
}
/* ---------- EXPORTAR CSV ---------- */
function exportAsCSV(data){
  const rows = [];
  // cabecera
  rows.push(['nivel','sesion','ejemplo_en'].join(','));

  data.forEach((les,i)=>{
    const sesion = (i % 2) + 1; // 1-2 dentro del nivel
    les.vocabulario.forEach(vocab=>{
      rows.push([
        les.nivel,
        sesion,
        JSON.stringify(vocab.ej_en)
      ].join(','));
    });
  });

  const blob = new Blob([rows.join('\n')], {type:'text/csv'});
  const url  = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = 'curso_ingles_50_sesiones.csv';
  link.click();
  URL.revokeObjectURL(url);
}

/* ---------- MODO AUTOM√ÅTICO: 60 sesiones ---------- */
async function runWholeCourse(){
  if(!confirm('¬øEjecutar las 50 sesiones autom√°ticamente?')) return;

  /* --- Reset --- */
  localStorage.removeItem(DICT_KEY);
  localStorage.removeItem(SESSIONS_KEY);
  dictionary   = [];
  allSessions  = [];
  nivel        = 1;
  localStorage.setItem(LEVEL_KEY, nivel);

  /* --- 25 niveles √ó 2 sesiones --- */
  for(; nivel <= 25; nivel++){
    for(let ses=1; ses<=2; ses++){
      const lesson = await generate();   // crea la lecci√≥n
      terminarLeccion(lesson);           // la guarda
      await new Promise(r=>setTimeout(r, 1500)); // pausa para evitar rate-limit
    }
    if(nivel < 25){
      localStorage.setItem(LEVEL_KEY, nivel+1);  // subir nivel autom√°ticamente
    }
  }

  /* --- Exporta CSV --- */
  exportAsCSV(allSessions);
  alert('‚úî Curso completado ‚Äì CSV descargado');
}

// Conectar el bot√≥n oculto RUN 60 con el modo autom√°tico
document.getElementById('dev-run').addEventListener('click', runWholeCourse);


</script>
</body>
</html>